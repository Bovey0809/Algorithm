* Lower level array
bits-> bytes

* Referential Arrays
#+BEGIN_SRC python
  counter = [0]*8
  counter[2] += 1
#+END_SRC

** Shallow copying
The shallow copying is just reference something.

** Deep copying

** primes.extedn(extras)
The array's extend method is using referential arrays.
1. draw the example of the extend method
   1. primes is a list, extras is a list.
   2. the primes.extend(extras) just reference extras list's elements to the last of the primes list.

* Dynamic arrays

** what is a dynamic arrays?
Don't have to specify how large an array is beforehand.
#+BEGIN_SRC python :results output
  import sys
  n = 10
  data = []

  for i in range(n):
      a = len(data)
      b = sys.getsizeof(data)
      print('Length: {0:3d}; Size in bytes: {1:4d}'.format(a, b))
      data.append(n)
#+END_SRC

#+RESULTS:
#+begin_example
Length:   0; Size in bytes:   64
Length:   1; Size in bytes:   96
Length:   2; Size in bytes:   96
Length:   3; Size in bytes:   96
Length:   4; Size in bytes:   96
Length:   5; Size in bytes:  128
Length:   6; Size in bytes:  128
Length:   7; Size in bytes:  128
Length:   8; Size in bytes:  128
Length:   9; Size in bytes:  192
#+end_example

** dynamic array implementation
#+BEGIN_SRC python
  import ctypes
  class DynamicArray(object):

      def __init__(self):

          self.n = 0
          self.capacity = 1
          self.A = self.make_array(self.capacity)

      def __len__(self):
          return self.n

      def __getitem__(self, k):

          if not 0 <= k < self.n:
              return IndexError('K is out of bounds!')

          return self.A[k]

      def append(self, ele):

          if self.n == self.capacity:
              self._resize(2*self.capacity) # 2x if capacity isn't enough

          self.A[self.n] = ele
          self.n += 1

      def _resize(self, new_cap):

          B = self.make_array(new_cap)

          for k in range(self.n):
              B[k] = self.A[k]

          self.A = B
          self.capacity = new_cap

       def make_array(self, new_cap):

           return (new_cap * ctypes.py_object)()

  arr = DynamicArray()

  arr.append(1)

  len(arr)

  arr.append(2)

  len(arr)

#+END_SRC
1. twice as big as the one array before.
2.

* Ctypes tutorial
A foreign function library for Python.
It provides C compatible data types, and allows calling functions in DLLs or shared libraries. It can be used to wrap these libraries in pure Python.


* Tips
** sys.getsizeof(data)
the function to get the extra bytes of a variable.
** useful links
1. [[https://orgmode.org/orgcard.pdf][org-mode cheatsheet]]
2. [[http://starship.python.net/crew/theller/ctypes/tutorial.html][ctype tutorial]]

* TODO What is

*
